#!/usr/bin/env python
# -*- coding: ansi_x3.4-1968 -*-
# generated by wxGlade 0.6.3 on Tue Feb 10 11:28:30 2009


# Copyright 2008 Dan Collins
#
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# And is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Build; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


import wx
from mswtools import pylock,projectdu, functions, vistadbscan#, pysel
import os
import subprocess
from numpy import hstack, size, array
from pdf2py import pdf, channel
from meg import sensors, plotvtk, megcontour, badchannels
from meg.fftmeg import nearest
from matplotlib import use
use('WXAgg')
from pylab import axes,pie,title,figure,show, plot, subplot
import time
import sys
import tarfile

imagepath = '/home/danc/programming/python/pyimages/'


# begin wxGlade: extracode
# end wxGlade


class MyDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.choice_1 = wx.Choice(self, -1, choices=[])
        self.label_2 = wx.StaticText(self, -1, "DB Choice")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHOICE, self.switchdbs, self.choice_1)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialog.__set_properties
        self.SetTitle("dialog_dbswitcher")
        self.SetFocus()
        # end wxGlade
        
        self.scandbs = vistadbscan.run()
        self.choice_1.SetItems(self.scandbs)

    def __do_layout(self):
        # begin wxGlade: MyDialog.__do_layout
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5.Add(self.choice_1, 0, 0, 0)
        sizer_5.Add(self.label_2, 0, 0, 0)
        self.SetSizer(sizer_5)
        sizer_5.Fit(self)
        self.Layout()
        # end wxGlade

    def switchdbs(self, event): # wxGlade: MyDialog.<event_handler>
        subprocess.call(["killall", "psel"])
        
        print self.scandbs[self.choice_1.GetSelection()]
        stage = os.environ['STAGE']
        try:
            os.remove(stage+'/map/database')
        except OSError:
            pass
        os.symlink(os.environ['HOME']+'/.mswhome/'+self.scandbs[self.choice_1.GetSelection()], stage+'/map/database')
        subprocess.Popen('psel', shell=True, stdout=subprocess.PIPE)
        frame_main.SetStatusText(self.scandbs[self.choice_1.GetSelection()],1)

# end of class MyDialog


class MyDialog2(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog2.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.radio_box_1 = wx.RadioBox(self, -1, "Export Method", choices=["Strip Confidential Info", "Encrypt Confidential Info (GnuGPG) http://server.neuromeg.org/pubkey.", "Dont Strip Confidential Info (Your Liable for Hippa Violation)"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.list_ctrl_1 = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.label_1 = wx.StaticText(self, -1, "Tarball output name prefix: ")
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "")
        self.gauge_1 = wx.Gauge(self, -1, 20)
        self.button_4 = wx.Button(self, -1, "Export Posted Data")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.exportposted, self.button_4)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialog2.__set_properties
        self.SetTitle("Export Data")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("tar.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((507, 445))
        self.SetToolTipString("Method to export data")
        self.SetFocus()
        self.radio_box_1.SetSelection(0)
        self.text_ctrl_1.SetMinSize((280, 27))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyDialog2.__do_layout
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.radio_box_1, 0, wx.BOTTOM, 6)
        sizer_4.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
        sizer_2.Add(self.label_1, 0, 0, 0)
        sizer_2.Add(self.text_ctrl_1, 0, 0, 0)
        sizer_4.Add(sizer_2, 0, 0, 0)
        sizer_4.Add(self.gauge_1, 0, wx.EXPAND, 0)
        sizer_4.Add(self.button_4, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.SetSizer(sizer_4)
        self.Layout()
        self.Centre()
        # end wxGlade

        self.list_ctrl_1.InsertColumn(0, 'Data')
        self.list_ctrl_1.SetColumnWidth(0, 540)

    def exportdata(self, event): # wxGlade: MyDialog2.<event_handler>
        print "Event handler `exportdata' not implemented!"
        event.Skip()

    def exportposted(self, event): # wxGlade: MyDialog2.<event_handler>
        print "Event handler `exportposted' not implemented"
        if self.radio_box_1.GetSelection() == 0:
            opt = ' -o -T '
        elif self.radio_box_1.GetSelection() == 1:
            opt = ' -o -I -T '
        elif self.radio_box_1.GetSelection() == 2:
            opt = ' -o -I -T '
        stage = os.environ['STAGE']

        Exp_path = frame_main.stage+'/data/'+os.uname()[1]+'_odexport/'

        postedfile = Exp_path+'postedfiles.csv'
        txtofposted = open(Exp_path+'postedfiles.csv', 'w')
        print frame_main.posted_unmod, size(frame_main.posted_unmod), type(frame_main.posted_unmod)
        for i in frame_main.posted_unmod:
            print i
            txtofposted.write(i)
            txtofposted.write('\n')
        txtofposted.close()

        s = subprocess.Popen(stage+'/map/bin/Data_Mover'+opt+os.uname()[1]+'_odexport -f '+postedfile, shell=True, stdout=subprocess.PIPE)
        out = s.stdout.readlines()
        frame_main.Export = frame_main.tree_ctrl_1.AppendItem(frame_main.USER, 'Export')
        frame_main.tree_ctrl_1.Expand(frame_main.USER)
        for i in out:
            frame_main.output = frame_main.tree_ctrl_1.AppendItem(frame_main.Export, str(i.split('\n')[0]))
        frame_main.SetStatusText("data exported: %s" % os.environ['USER'], 0)

        filenameout = self.text_ctrl_1.GetLineText(0)
        print filenameout

        if self.radio_box_1.GetSelection() == 1:
            print 'not avail now'

            dlg = wx.MessageDialog(self, 'gpg encryption not avail now', 'gnugpg', wx.OK|wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
            return

            s = subprocess.Popen('gpg --yes -r dancollins --out expshh.asc --encrypt '+Exp_path+'Exp*',shell=True, stdout=subprocess.PIPE)
            out = s.stdout.readlines()
            print 'gpg --yes -r dancollins --out expshh.asc --encrypt '+Exp_path+'Exp*'
            print 'finished excrypting'
            frame_main.Encryption = frame_main.tree_ctrl_1.AppendItem(frame_main.USER, 'Encryption')
            frame_main.tree_ctrl_1.Expand(frame_main.USER)
            os.remove(stage+'/data/'+os.uname()[1]+'_odexport/Exp~'+frame_main.posted[0].split('/')[0])
            dlg = wx.MessageDialog(self, 'gpg encryption sucessful', 'gnugpg', wx.OK|wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()

        if self.radio_box_1.GetSelection() == 2:
            print 'not avail now'

            dlg = wx.MessageDialog(self, 'gpg encryption not avail now', 'gnugpg', wx.OK|wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
            return

        #tar
        subprocess.call(['rm '+stage+'/data/'+os.uname()[1]+'_odexport/*.tar'], shell=True, stdout=subprocess.PIPE)
        step = 0;
        self.gauge_1.SetValue(0)
        for i in frame_main.posted:
            id = i.split('/')[0]
            print 'tarring',id, Exp_path+filenameout
            tar = tarfile.open(Exp_path+filenameout+'.tar', "w")
            tar.add(stage+'/data/'+os.uname()[1]+'_odexport/'+id)
            step = step + 1
            stepsize = step*(self.gauge_1.GetRange()/size(frame_main.posted,0))
            print stepsize
            self.gauge_1.SetValue(pos=self.gauge_1.GetValue() + stepsize)
            tar.add(stage+'/data/'+os.uname()[1]+'_odexport/Exp~'+id)
            tar.list()

        subprocess.call(['rm -r '+stage+'/data/'+os.uname()[1]+'_odexport/'+id], shell=True, stdout=subprocess.PIPE)
        subprocess.call(['rm '+stage+'/data/'+os.uname()[1]+'_odexport/Exp~'+id], shell=True, stdout=subprocess.PIPE)

# end of class MyDialog2


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.frame_main_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(12, "dbswitcher", "", wx.ITEM_NORMAL)
        self.frame_main_menubar.Append(wxglade_tmp_menu, "DBTools")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(1, "Psel", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(2, "SquidUtl", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(3, "Acquisition Menu", "", wx.ITEM_NORMAL)
        self.frame_main_menubar.Append(wxglade_tmp_menu, "Start")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(31, "Coil LogPower 165hz Topo", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(32, "Channel Log Power", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(33, "bad channel", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(30, "Head-Index-Sensors pnts", "", wx.ITEM_NORMAL)
        self.frame_main_menubar.Append(wxglade_tmp_menu, "View")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(20, "Project Disk Usage", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(23, "Plot Disk Usage", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(21, "Export Posted", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(22, "Clean Export Dir", "", wx.ITEM_NORMAL)
        self.frame_main_menubar.Append(wxglade_tmp_menu, "DiskTools")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(200, "pymeg", "", wx.ITEM_NORMAL)
        self.frame_main_menubar.Append(wxglade_tmp_menu, "AdvancedTools")
        self.SetMenuBar(self.frame_main_menubar)
        # Menu Bar end
        self.frame_main_statusbar = self.CreateStatusBar(2, 0)
        
        # Tool Bar
        self.toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_DOCKABLE|wx.TB_3DBUTTONS|wx.TB_TEXT)
        self.SetToolBar(self.toolbar)
        self.toolbar.AddLabelTool(100, "Patient Selection", wx.Bitmap("psel.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_CHECK, "", "")
        self.toolbar.AddLabelTool(105, "PYsel", wx.Bitmap("pysel.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_CHECK, "", "")
        self.toolbar.AddLabelTool(101, "Aquire Data", wx.Bitmap("acquire.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.toolbar.AddLabelTool(102, "Get-Posted", wx.Bitmap("posted.jpeg", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.toolbar.AddLabelTool(103, "DB-Locker", wx.Bitmap("lock.png", wx.BITMAP_TYPE_ANY), wx.Bitmap("unlock.png", wx.BITMAP_TYPE_ANY), wx.ITEM_CHECK, "to lock and unlock database", "")
        self.toolbar.AddLabelTool(104, "Export", wx.Bitmap("tar.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        # Tool Bar end
        self.tree_ctrl_1 = wx.TreeCtrl(self, -1)
        self.button_1 = wx.Button(self, -1, "Clear screen")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.dbswitcher, id=12)
        self.Bind(wx.EVT_MENU, self.psel, id=1)
        self.Bind(wx.EVT_MENU, self.SquidUtl, id=2)
        self.Bind(wx.EVT_MENU, self.ape, id=3)
        self.Bind(wx.EVT_MENU, self.coilpower, id=31)
        self.Bind(wx.EVT_MENU, self.chpower, id=32)
        self.Bind(wx.EVT_MENU, self.badchannels, id=33)
        self.Bind(wx.EVT_MENU, self.plotallpnts, id=30)
        self.Bind(wx.EVT_MENU, self.du, id=20)
        self.Bind(wx.EVT_MENU, self.plotdu, id=23)
        self.Bind(wx.EVT_MENU, self.exportwindow, id=21)
        self.Bind(wx.EVT_MENU, self.cleanod, id=22)
        self.Bind(wx.EVT_MENU, self.pymeg, id=200)
        self.Bind(wx.EVT_TOOL, self.psel, id=100)
        self.Bind(wx.EVT_TOOL, self.pysellaunch, id=105)
        self.Bind(wx.EVT_TOOL, self.ape, id=101)
        self.Bind(wx.EVT_TOOL, self.getposted, id=102)
        self.Bind(wx.EVT_TOOL, self.exportwindow, id=104)
        self.Bind(wx.EVT_BUTTON, self.cleartree, self.button_1)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("MSW Tools")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("posted.jpeg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.frame_main_statusbar.SetStatusWidths([-1, -1])
        # statusbar fields
        frame_main_statusbar_fields = ["statusbar", "db status"]
        for i in range(len(frame_main_statusbar_fields)):
            self.frame_main_statusbar.SetStatusText(frame_main_statusbar_fields[i], i)
        self.toolbar.SetToolBitmapSize((10, 15))
        self.toolbar.Realize()
        self.tree_ctrl_1.SetMinSize((591, 274))
        self.button_1.SetBackgroundColour(wx.Colour(128, 128, 128))
        # end wxGlade
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        self.USER = self.tree_ctrl_1.AddRoot(str(os.environ['USER']))
        self.stage = os.environ['STAGE']


        s = subprocess.Popen('get_posted_sel', shell=True, stdout=subprocess.PIPE)
        out = s.stdout.readlines()
        if len(out) != 0: #db ok, something posted
            datastring = out[0].strip('\n').replace('/','%').replace('@','/').replace(' ','@')
            datapdf = [self.stage+'/data/'+os.environ['USER']+'_data0/'+datastring]
            posted = out[0]
            self.toolbar.ToggleTool(103, True)
            #self.toolbar.SetToolNormalBitmap(103, wx.Bitmap("lock.png"))
        else:
            posted = 'nothing posted'
            self.toolbar.ToggleTool(103, False)


        self.SetStatusText("file posted: %s" % posted, 0)
        if os.path.islink(os.environ['STAGE']+'/map/database') == True: #already db link
            self.SetStatusText(os.path.basename(os.environ['STAGE']+'/map/database'),1)



    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.tree_ctrl_1, 0, wx.EXPAND, 3)
        sizer_1.Add(self.button_1, 0, 0, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        sizer_1.SetSizeHints(self)
        self.Layout()
        self.Centre()
        # end wxGlade


    def OnClose(self, event):
        print 'exiting app'
        self.Destroy()
        frame_pysel.Destroy()
        exportdialog.Destroy()



    def psel(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `psel' !"
        subprocess.Popen('psel', shell=True, stdout=subprocess.PIPE)
        frame_pysel.Hide()
        self.toolbar.ToggleTool(105, False)


    def SquidUtl(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `SquidUtl' not implemented!"
        event.Skip()

    def ape(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `ape'  !"
        #self.lockstate()
        self.lockdb(event)
        subprocess.Popen('ape', shell=True, stdout=subprocess.PIPE)
        #subprocess.call('ape')

    def lockstate(self):
        print 'checking lock'
        checklockstatus = pylock.checklock()

        if checklockstatus == 0:
            self.SetStatusText("database lock: %s" % os.environ['USER'], 1)
            self.toolbar.SetToolNormalBitmap(103, wx.Bitmap("lock.png"))
            self.toolbar.ToggleTool(103, True)
            return 0
        if checklockstatus == -1:
            self.SetStatusText("database lock error:", 1)
            self.toolbar.ToggleTool(103, False)
            self.toolbar.SetToolNormalBitmap(103, wx.Bitmap("lock-broken.png"))
            print 'lock error test'

            return -1
        if checklockstatus == 1:
            self.SetStatusText("database new lock: %s" % os.environ['USER'], 1)
            #self.toolbar.SetToolNormalBitmap(103, wx.Bitmap("lock.png"))
            self.toolbar.ToggleTool(103, True)
            return 1
        if checklockstatus == 2:
            self.SetStatusText("database new lock: %s" % os.environ['USER'], 1)
            self.toolbar.SetToolNormalBitmap(103, wx.Bitmap("lock.png"))
            self.toolbar.ToggleTool(103, True)
            return 2
        if self.du('Null') == -1: #disk full
            pylock.rmapelink()
            dlg = wx.MessageDialog(self, 'Lock Error. Disk Full', 'mswdblock disk error.', wx.OK|wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return -2
        if self.du('Null') == 2:
            dlg = wx.MessageDialog(self, 'Your about to loose acquisition ability. Disk Close to Full', 'move your stuff', wx.OK|wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            print 'something'

        print 'check lock status is',checklockstatus

    def lockdb(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `lockdb'"
        lockstatus = self.lockstate()
        print 'lock status now',lockstatus
        if lockstatus == -2: #disk full
            #mv Colorado_Aug2004.confi Colorado_Aug2004.config
            pylock.rmapelink()
            dlg = wx.MessageDialog(self, 'Lock Error. Disk Full', 'mswdblock disk error.', wx.OK|wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
        #else:
        #    pylock.apelink()

        if lockstatus == 0:
            dlg = wx.MessageDialog(self, 'Your the Owner of the current lock.', 'mswdblock ok.', wx.OK|wx.ICON_INFORMATION)
            #pylock.newlock()
            #pylock.dbmklink()
            #pylock.mkdatalinks(os.environ['MSWDATA']+os.environ['USER']+'_data0', os.environ['MSWEXPORT']+os.environ['USER'])#+'_od10')
            dlg.ShowModal()
            dlg.Destroy()

        if lockstatus == -1:
            dlg = wx.MessageDialog(self, 'Lock Error. Cant override current lock', 'mswdblock error.', wx.OK|wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()

        if lockstatus == 1:
            dlg = wx.MessageDialog(self, 'Creating new lock.', 'mswdblock new.', wx.OK|wx.ICON_INFORMATION)
            pylock.newlock()
            pylock.dbmklink()
            pylock.mkdatalinks(os.environ['MSWDATA']+os.environ['USER']+'_data0', os.environ['MSWEXPORT']+os.environ['USER'])#+'_od10')
            dlg.ShowModal()
            dlg.Destroy()
        if lockstatus == 2:
            dlg = wx.MessageDialog(self, 'Overriding stale lock.', 'mswdblock killandstart', wx.OK|wx.ICON_INFORMATION)
            pylock.lockremove()
            pylock.newlock()
            pylock.dbrmlink()
            pylock.dbmklink()
            pylock.mkdatalinks(os.environ['MSWDATA']+os.environ['USER']+'_data0', os.environ['MSWEXPORT']+os.environ['USER'])#+'_od10')
            dlg.ShowModal()
            dlg.Destroy()




    def unlockdb(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `unlockdb'"
        pylock.lockremove()
        self.SetStatusText("database lock removed: %s" % os.environ['USER'], 1)
        pylock.dbrmlink()
        pylock.rmdatalinks()

    def du(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `projectdu'"
        stats = projectdu.diskused()
        self.DU = self.tree_ctrl_1.AppendItem(self.USER, 'DiskUsage')
        self.tree_ctrl_1.Expand(self.USER)
        for i in range(0, len(stats)):
            self.du = self.tree_ctrl_1.AppendItem(self.DU, str(stats.items()[i]))
        self.SetStatusText("Disk Usage: %s" % os.environ['USER']+':'+str(stats['% Free']), 0)
        if stats['% Free'] < 10: #warning
            if stats['% Free'] <= 0: #warning
                dlg = wx.MessageDialog(self, 'disk usage error. Youve exceeded your allotment', 'Disk Hog!', wx.OK|wx.ICON_ERROR)
                dlg.ShowModal()
                dlg.Destroy()
                pylock.rmapelink()
                projectdu.plotdu()

                return -1
            else:
                pylock.apelink()
                dlg = wx.MessageDialog(self, 'Your about to loose acquisition ability. Disk Close to Full', 'move your sh**', wx.OK|wx.ICON_WARNING)
                dlg.ShowModal()
                dlg.Destroy()
                projectdu.plotdu()

                print 'mak'
                return 2
        else:
            pylock.apelink()
            print 'making links'



    def plotdu(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `plotdu'  "
        projectdu.plotdu()

    def exportwindow(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `exportwindow' not implemented"
        exportdialog.Show()
        try:
            #exportdialog.list_ctrl_1.ClearAll()
            for i in frame_main.posted:
                index = exportdialog.list_ctrl_1.InsertStringItem(sys.maxint, i) #num_items, selitem)
                #self.list_ctrl_1.SetStringItem(index, 1, frame_main.posted[i])
        except AttributeError:
            print 'nothing posted'



    def cleanod(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `cleanod' not implemented"
        stage = os.environ['STAGE']
        subprocess.call(['rmdir '+stage+'/data/'+os.uname()[1]+'_odexport/*'])
        #os.remove(stage+'/data/'+os.environ['USER']+'odexport/*')

    def plotallpnts(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `plotallpnts' not implemented"
        r = self.postcheck()
        if r == -1: #nothing posted
            return

        print 'plotting ',self.datapdf
        self.p = pdf.read(self.datapdf[0])
        print self.p
        ind=hstack([self.p.hs.index_lpa,self.p.hs.index_rpa,self.p.hs.index_nasion]).reshape(3,3)
        s=sensors.locations(self.datapdf[0])
        plotvtk.display(self.p.hs.hs_point, s.megchlpos, ind)

    def postcheck(self):
        try:
            self.posted
        except AttributeError:
            print 'nothing posted'
            dlg = wx.MessageDialog(self, 'Nothing Posted. Open Psel or PYsel and post something.', 'What did you expect to happen!', wx.OK|wx.ICON_EXCLAMATION)
            dlg.ShowModal()
            dlg.Destroy()
            return -1

    def getposted(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `getposted' "

        if self.toolbar.GetToolState(100) == True:
            s = subprocess.Popen('get_posted_sel', shell=True, stdout=subprocess.PIPE)
            out = s.stdout.readlines()
            posted = out[0].strip('\n')
            self.posted_unmod = [posted]
            datastring = out[0].strip('\n').replace('/','%').replace('@','/').replace(' ','@')
            self.datapdf = [self.stage+'/data/'+os.uname()[1]+'_data0/'+datastring]
            self.posted = [datastring]
            method = 'psel'


        elif self.toolbar.GetToolState(105) == True:
            self.datapdf = [str(frame_pysel.dir.GetPath())+'/'+str(frame_pysel.filelist[0])]
            idplus = frame_pysel.dir.GetPath().split('/')[5:] #pid and potentially more
            print self.datapdf
            for i in range(0, len(idplus)):
                if i == 0:
                    p = idplus[i]+'/'
                    p2 = idplus[i]+'@'
                elif i == 2:
                    session = idplus[2].replace('%','/').replace('@',' ')+'/'
                    session2 = idplus[2].replace('%','/').replace('@',' ')+'@'
                    p = p+session
                    p2 = p2+session2
                else:
                    p = p+idplus[i]+'/'
                    p2 = p2+idplus[i]+'@'
            patient2session = str(p)
            patient2session2 = str(p2)

            posted = []
            self.posted_unmod = []

            for i in range(0, len(frame_pysel.filelist)):
                posted.append(patient2session+str(frame_pysel.filelist[i]))
                self.posted_unmod.append(patient2session2+str(frame_pysel.filelist[i]))
            self.SetStatusText("file posted: %s" % posted, 0)
            self.posted = posted #str(posted)
            method = 'pysel'

        r = self.postcheck()
        if r == -1: #nothing posted
            return

        try:
            self.tree_ctrl_1.Delete(self.POSTED)
        except AttributeError:
            pass

        self.POSTED = self.tree_ctrl_1.AppendItem(self.USER, 'Posted')
        for i in self.posted:
            self.tree_ctrl_1.AppendItem(self.POSTED, method+'_Posted:'+str(i))
        self.tree_ctrl_1.Expand(self.POSTED)

    def coilpower(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `coilpower'  "
        try:
            n = nearest(self.freq, 165)
        except AttributeError:
            print 'no power... running for you'
            self.pow,self.freq = functions.psd(self.datapdf)
        n = nearest(self.freq, 165)
        self.ch = channel.index(self.datapdf, 'meg')
        megcontour.display(self.pow[int(n[0]),:], self.ch.chanlocs)

    def chpower(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `chpower'  "
        try:
            self.pow
        except AttributeError:
            self.pow,self.freq = functions.psd(self.datapdf)
        figure();plot(self.freq,self.pow);title('power spectral density');show()

    def badchannels(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `badchannels'  "
        try:
            bad = badchannels.calc(datapdf, self.pow, ch,thresh=5, chfreq='yes', freqarray=self.freq, maxhz=200,powernotch='yes', minhz=4)
        except NameError:
            print 'no power... running for you'
            self.pow,self.freq = functions.psd(self.datapdf)
            self.ch = channel.index(self.datapdf, 'meg')
            bad = badchannels.calc(self.datapdf, self.pow, self.ch, thresh=5, chfreq='yes', freqarray=self.freq, maxhz=200,powernotch='yes', minhz=4)
        figure(1,figsize=(5,10))
        subplot(2,1,1);plot(bad[3]);title('channel power ratio to family');
        subplot(2,1,2);megcontour.display(bad[3], self.ch.chanlocs)

    def pymeg(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `pymeg'"
        subprocess.call(os.environ['PYMEGPATH']+'/gui/wxapp.py')

    def lockdbradio(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `lockdbradio'"
        print "lock state", self.toolbar.GetToolState(103)
        if self.toolbar.GetToolState(103) == True:
            self.lockdb(self)
            #self.toolbar.SetToolNormalBitmap(103, wx.Bitmap("lock.png"))
        else:
            #self.toolbar.SetToolNormalBitmap(103, wx.Bitmap("unlock.png"))
            self.unlockdb(self)


    def cleartree(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `cleartree' not implemented"
        self.tree_ctrl_1.Delete(self.USER)
        self.USER = self.tree_ctrl_1.AddRoot(str(os.environ['USER']))

    def dragstart(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `dragstart' not implemented"
        event.Skip()

    def dragend(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `dragend' not implemented"
        event.Skip()

    def pysellaunch(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `pysellaunch' not implemented"
        frame_pysel.Show()
        subprocess.call(["killall", "psel"])
        self.toolbar.ToggleTool(100, False)

    def getpyselpost(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `getpyselpost' not implemented"
        print frame_pysel.dir.GetPath(),'/',frame_pysel.filelist

    def something(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `something' not implemented"
        exportdialog.Show()

    def dbswitcher(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `dbswitcher' not implemented"
        self.scandbs = vistadbscan.run()
        print self.scandbs
        
        switcherdialog.Show()

# end of class MyFrame

class MyTextDropTarget(wx.TextDropTarget):
    def __init__(self, object):
        wx.TextDropTarget.__init__(self)
        self.object = object

    def OnDropText(self, x, y, data):
        self.object.InsertStringItem(0, data)
        return data


class DragDrop(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, size=(650, 500))

        splitter1 = wx.SplitterWindow(self, -1, style=wx.SP_3D)
        splitter2 = wx.SplitterWindow(splitter1, -1, style=wx.SP_3D)
        STAGE = os.environ['STAGE']
        self.dir = wx.GenericDirCtrl(splitter1, -1, dir=STAGE+'/data/'+STAGE+'/data/'+os.uname()[1]+'_data0/', style=wx.DIRCTRL_DIR_ONLY)
        self.lc1 = wx.ListCtrl(splitter2, -1, style=wx.LC_LIST)
        self.lc2 = wx.ListCtrl(splitter2, -1, style=wx.LC_LIST)

        dt = MyTextDropTarget(self.lc2)
        self.lc2.SetDropTarget(dt)
        self.Bind(wx.EVT_LIST_BEGIN_DRAG, self.OnDragInit, id=self.lc1.GetId())

        tree = self.dir.GetTreeCtrl()

        splitter2.SplitHorizontally(self.lc1, self.lc2)
        splitter1.SplitVertically(self.dir, splitter2)

        self.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnSelect, id=tree.GetId())

        self.OnSelect(0)
        #self.Centre()
        self.Show(True)
        self.Bind(wx.EVT_CLOSE, self.OnClose)



    def OnSelect(self, event):
        list = os.listdir(self.dir.GetPath())
        print self.dir.GetPath()
        self.filelist = []
        self.lc1.ClearAll()
        self.lc2.ClearAll()
        for i in range(len(list)):
            if list[i][0] != '.':
                self.lc1.InsertStringItem(0, list[i])

    def OnDragInit(self, event):
        text = self.lc1.GetItemText(event.GetIndex())
        tdo = wx.TextDataObject(text)
        tds = wx.DropSource(self.lc1)
        tds.SetData(tdo)
        tds.DoDragDrop(True)
        self.filelist.append(text)

    def OnClose(self, event):
        print 'closing win'
        self.Hide()


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_main = MyFrame(None, -1, "")
    app.SetTopWindow(frame_main)
    frame_pysel = DragDrop(None, -1, 'PYsel Window')
    frame_pysel.Hide()
    frame_main.Show()
    exportdialog = MyDialog2(None, -1, 'Export Window')
    switcherdialog = MyDialog(None, -1, 'Switcher Window')
    app.MainLoop()



