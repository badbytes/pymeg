#!/usr/bin/env python
# -*- coding: ansi_x3.4-1968 -*-
# generated by wxGlade 0.6.3 on Tue Sep 29 14:21:08 2009

import wx

# begin wxGlade: extracode
# end wxGlade
import matplotlib
matplotlib.use('WXAgg')
from matplotlib.figure import Figure

from matplotlib.backends.backend_wxagg import \
    FigureCanvasWxAgg as FigCanvas#, \
    #NavigationToolbar2WxAgg as NavigationToolbar
#from matplotlib.backends.backend_wx import NavigationToolbar2Wx

import numpy as np
'''
from gui import megsubplot 
from numpy import *
data = random.randn(10000,10)
#megsubplot.passdata(data)
#reload megsubplot 
samplerate = 10
chanlabels = arange(0, 10)

m = megsubplot.passdata2me(data, samplerate, chanlabels)
t.calc(data=d['data'][:,0], frames=(600/.0034)-1, trials=100, srate=290.64)
t.calc(data=dt, trials=100, srate=290.64,frames=150000/100, freqrange=[5.0,100])

'''
def retrievepdf(fn):
    from pdf2py import pdf
    p = pdf.read(fn)
    p.data.setchannels('meg')
    p.data.getdata(0, p.data.pnts_in_file)
    p.data.offsetcorrect(start=0, end=-1)
    data = np.float32(p.data.data_block[:,:])
    #chlabels = np.arange(0,np.size(p.data.data_block,1))
    chlabels = p.data.channels.channelsortedlabels
    sp = p.hdr.header_data.sample_period
    sr = 1/sp
    #timeaxes = p.data.eventtime#np.arange(0,sp*1000, sp)
    timeaxes = np.tile(p.data.eventtime,p.data.numofepochs)
    timeaxes = np.arange(0,p.data.eventtime[-1]*p.data.numofepochs, sp)
    print 'timeaxes', timeaxes.shape
    return data, timeaxes, chlabels, sr
    

def retrievepythondata(fn):
    from pdf2py import readwrite
    pyd = readwrite.readdata(fn)
    try:
        data = pyd['data']
        chlabels = pyd['chlabels']
        samplerate = pyd['samplerate']
        sp = 1/np.float32(samplerate)
        timeaxes = np.arange(0,sp*np.size(data,0), sp)
    except AttributeError:
        print 'ae'
    return data, timeaxes, chlabels, samplerate
        
    


def getdata():
    sr = np.float32(100.0)
    sp = 1/sr
    data = np.random.rand(10000,100)
    timeaxes = np.arange(0,sp*1000, sp)

    
    from pdf2py import pdf#, readwrite
    fn = '/home/danc/python/data/0611SEF/e,rfhp1.0Hz,n,x,baha001-1SEF,f50lp'
    #~ sr = 290.64 #sample rate
    #~ sp = 1/sr #sample period
    p = pdf.read(fn)
    p.data.setchannels('meg')
    p.data.getdata(0, p.data.pnts_in_file)
    p.data.offsetcorrect(start=0, end=-1)
    data = np.float32(p.data.data_block[:,:])
    #~ timeaxes = np.arange(0,sp*p.data.pnts_in_file, sp)
    
    #data = np.random.rand(256,500)
    chlabels = np.arange(0,244)
    return data, timeaxes, chlabels
    


class FrameChSubType(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: FrameChSubType.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: FrameChSubType.__set_properties
        self.SetTitle("Channel SubType")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: FrameChSubType.__do_layout
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(sizer_10)
        sizer_10.Fit(self)
        self.Layout()
        # end wxGlade

# end of class FrameChSubType


class FrameChOptions(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: FrameChOptions.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.sizer_8_staticbox = wx.StaticBox(self, -1, "Channel Select")
        self.sizer_6_staticbox = wx.StaticBox(self, -1, "stuff")
        self.sizer_9_staticbox = wx.StaticBox(self, -1, "options")
        self.list_ctrl_1 = wx.ListCtrl(self, -1, style=wx.LC_LIST|wx.LC_REPORT|wx.SUNKEN_BORDER|wx.FULL_REPAINT_ON_RESIZE)
        self.button_color = wx.Button(self, -1, "Set Color")
        self.choice_amplitude = wx.Choice(self, -1, choices=["Set Amplitude"])
        self.choice_Spacing = wx.Choice(self, -1, choices=["Set Channel Spacing"])
        self.choice_timescale = wx.Choice(self, -1, choices=["Set Time Scale"])
        self.radio_box_1 = wx.RadioBox(self, -1, "Select", choices=["None", "All", "SubType"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.choice_1 = wx.Choice(self, -1, choices=["MEG", "EEG", "Bi-EEG", ""])
        self.list_box_channels = wx.ListBox(self, -1, choices=["Something Wrong"], style=wx.LB_SINGLE|wx.LB_EXTENDED)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.selectcolor, self.button_color)
        self.Bind(wx.EVT_CHOICE, self.setscale, self.choice_amplitude)
        self.Bind(wx.EVT_CHOICE, self.setscale, self.choice_Spacing)
        self.Bind(wx.EVT_CHOICE, self.setscale, self.choice_timescale)
        # end wxGlade
        self.Bind(wx.EVT_CLOSE, self.OnClose)


    def __set_properties(self):
        # begin wxGlade: FrameChOptions.__set_properties
        self.SetTitle("Channel Settings")
        self.list_ctrl_1.SetMinSize((200, 335))
        self.list_ctrl_1.SetBackgroundColour(wx.Colour(228, 228, 228))
        self.list_ctrl_1.SetFocus()
        self.button_color.SetBackgroundColour(wx.Colour(183, 183, 162))
        self.choice_amplitude.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.choice_amplitude.SetSelection(0)
        self.choice_Spacing.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.choice_Spacing.SetSelection(0)
        self.choice_timescale.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.choice_timescale.SetSelection(0)
        self.radio_box_1.SetBackgroundColour(wx.Colour(200, 199, 199))
        self.radio_box_1.SetSelection(0)
        self.choice_1.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.choice_1.Enable(False)
        self.choice_1.SetSelection(0)
        self.list_box_channels.Enable(False)
        self.list_box_channels.Hide()
        self.list_box_channels.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: FrameChOptions.__do_layout
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.HORIZONTAL)
        sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.HORIZONTAL)
        sizer_9 = wx.StaticBoxSizer(self.sizer_9_staticbox, wx.VERTICAL)
        sizer_8.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
        sizer_9.Add(self.button_color, 0, wx.ALL|wx.EXPAND, 0)
        sizer_9.Add(self.choice_amplitude, 0, wx.EXPAND, 0)
        sizer_9.Add(self.choice_Spacing, 0, wx.EXPAND, 0)
        sizer_9.Add(self.choice_timescale, 0, wx.EXPAND, 0)
        sizer_8.Add(sizer_9, 1, wx.EXPAND, 0)
        sizer_7.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_6.Add(self.radio_box_1, 0, 0, 0)
        sizer_6.Add(self.choice_1, 0, 0, 0)
        sizer_7.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_7.Add(self.list_box_channels, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_7)
        sizer_7.Fit(self)
        self.Layout()
        # end wxGlade
        self.list_ctrl_1.InsertColumn(0, 'Channel')
        self.list_ctrl_1.InsertColumn(0, 'Value')
        self.list_ctrl_1.SetColumnWidth(0, 75)
        self.list_ctrl_1.SetColumnWidth(1, 75)
        try:
            self.list_box_channels.SetItems(frame.chlabels)
            for i in frame.chlabels:
                index = self.list_ctrl_1.InsertStringItem(sys.maxint, str(i))
                self.list_ctrl_1.SetStringItem(index, 1, i)
                #self.list_ctrl_1.SetItem(i)
            #self.list_ctrl_1.SetItem(frame.chlabels)
            self.chcolorlist = np.tile((0,0,0),(len(frame.chlabels),1)) #set all channels to black
        except AttributeError:
            print 'no labels'
    def OnClose(self, event):
        print 'closing win'
        self.Hide()
        


    def getchannels(self, event): # wxGlade: FrameChOptions.<event_handler>
        print "Event handler `getchannels' not implemented!"
        self.selectedchannels = self.combo_box_chselect.GetSelection()
        print self.selectedchannels

    def selectcolor(self, event): # wxGlade: FrameChOptions.<event_handler>
        print "Event handler `selectcolor' not implemented!"
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            dlg.Destroy()
        data = dlg.GetColourData()
        #print str(data.GetColour().Get())
#        chsel = self.list_box_channels.GetSelections()
#        chsel = self.list_ctrl_1.GetSelectedItemCount()
#        wx.ListCtrl.GetNextSelected
#        wx.ListCtrl.GetItemState
        
        
        
        for i in range(0, len(frame.chlabels)):
            if self.list_ctrl_1.IsSelected(i):
                #print 'ch s', i
                self.list_ctrl_1.SetItemBackgroundColour(i, data.GetColour().Get())
                #self.chcolorlist.append(data.GetColour().Get())
                self.chcolorlist[i] = data.GetColour().Get()
        print self.chcolorlist
        frame.go(event)
                
        #chsel = self.list_ctrl_1.IsSelected(2,5,6)
        #print 'ch selected', chsel
        #print data.GetColour().Get()
        
        #self.list_ctrl_1.SetItemBackgroundColour(chsel, data.GetColour().Get())
        #self.list_box_channels.SetItemBackgroundColour(1, 'red')

    def setscale(self, event): # wxGlade: FrameChOptions.<event_handler>
        print "Event handler `setscale' not implemented!"
        for i in range(0, len(frame.chlabels)):
            if self.list_ctrl_1.IsSelected(i):
                #print 'ch s', i
                self.list_ctrl_1.SetItemBackgroundColour(i, data.GetColour().Get())
                #self.chcolorlist.append(data.GetColour().Get())
                self.chcolorlist[i] = data.GetColour().Get()
        print self.chcolorlist
        frame.go(event)

    def setchannels(self, event): # wxGlade: FrameChOptions.<event_handler>
        print "Event handler `setchannels' not implemented"
        self.combo_box_chselect.SetItems(frame.chlabels)

# end of class FrameChOptions




class FrameTFT(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: FrameTFT.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.sizer_5_copy_staticbox = wx.StaticBox(self, -1, "Frequency Range")
        self.sizer_5_copy_copy_staticbox = wx.StaticBox(self, -1, "Cycle Range")
        self.sizer_5_staticbox = wx.StaticBox(self, -1, "Channel")
        self.label_1 = wx.StaticText(self, -1, "select channel")
        self.tftchchoice = wx.Choice(self, -1, choices=["NA"])
        self.label_1_copy = wx.StaticText(self, -1, "start and end hz")
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "")
        self.text_ctrl_2 = wx.TextCtrl(self, -1, "")
        self.label_1_copy_copy = wx.StaticText(self, -1, "start and end window")
        self.text_ctrl_1_copy = wx.TextCtrl(self, -1, "")
        self.text_ctrl_2_copy = wx.TextCtrl(self, -1, "")
        self.tftgo = wx.Button(self, -1, "Run")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHOICE, self.getchannellist, self.tftchchoice)
        self.Bind(wx.EVT_BUTTON, self.starttft, self.tftgo)
        # end wxGlade
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        
    def __set_properties(self):
        # begin wxGlade: FrameTFT.__set_properties
        self.SetTitle("TFT")
        self.tftchchoice.SetMinSize((154, 25))
        self.tftchchoice.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: FrameTFT.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_5_copy_copy = wx.StaticBoxSizer(self.sizer_5_copy_copy_staticbox, wx.HORIZONTAL)
        sizer_5_copy = wx.StaticBoxSizer(self.sizer_5_copy_staticbox, wx.HORIZONTAL)
        sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
        sizer_5.Add(self.label_1, 0, 0, 0)
        sizer_5.Add(self.tftchchoice, 0, 0, 0)
        sizer_3.Add(sizer_5, 1, wx.EXPAND, 0)
        sizer_5_copy.Add(self.label_1_copy, 0, 0, 0)
        sizer_5_copy.Add(self.text_ctrl_1, 0, 0, 0)
        sizer_5_copy.Add(self.text_ctrl_2, 0, 0, 0)
        sizer_3.Add(sizer_5_copy, 1, wx.EXPAND, 0)
        sizer_5_copy_copy.Add(self.label_1_copy_copy, 0, 0, 0)
        sizer_5_copy_copy.Add(self.text_ctrl_1_copy, 0, 0, 0)
        sizer_5_copy_copy.Add(self.text_ctrl_2_copy, 0, 0, 0)
        sizer_3.Add(sizer_5_copy_copy, 1, wx.EXPAND, 0)
        sizer_3.Add(self.tftgo, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.SetSizer(sizer_3)
        sizer_3.Fit(self)
        self.Layout()
        # end wxGlade
        try:
            self.tftchchoice.SetItems(frame.chlabels)
        except AttributeError:
            pass
    def OnClose(self, event):
        print 'closing win'
        self.Hide()

    def starttft(self, event): # wxGlade: FrameTFT.<event_handler>
        print "Event handler `starttft' not implemented"
        frame.tftch = self.tftchchoice.GetSelection()
        frame.tftinit(event)

    def getchannellist(self, event): # wxGlade: FrameTFT.<event_handler>
        print "Event handler `getchannellist' not implemented"
        print self.tftchchoice.GetSelection()
        
        #~ self.tftchchoice.SetItems(frame.chlabels)

# end of class FrameTFT


class FrameScaling(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: FrameScaling.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.amplitude_copy = wx.ComboBox(self, -1, choices=[], style=wx.CB_DROPDOWN)
        self.spacing_copy = wx.ComboBox(self, -1, choices=[], style=wx.CB_DROPDOWN)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.amplitudehandler, self.amplitude_copy)
        self.Bind(wx.EVT_COMBOBOX, self.spacinghandler, self.spacing_copy)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: FrameScaling.__set_properties
        self.SetTitle("Manual Scaling")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: FrameScaling.__do_layout
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_4.Add(self.amplitude_copy, 0, 0, 0)
        sizer_4.Add(self.spacing_copy, 0, 0, 0)
        self.SetSizer(sizer_4)
        sizer_4.Fit(self)
        self.Layout()
        # end wxGlade

    def amplitudehandler(self, event): # wxGlade: FrameScaling.<event_handler>
        print "Event handler `amplitudehandler' not implemented!"
        event.Skip()

    def spacinghandler(self, event): # wxGlade: FrameScaling.<event_handler>
        print "Event handler `spacinghandler' not implemented!"
        event.Skip()

# end of class FrameScaling



class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(10, "load 4D file", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(11, "load python data", "", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(22, "Channel Properties", "", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "Edit")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(30, "tft", "", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "Execute")
        self.SetMenuBar(self.frame_1_menubar)
        # Menu Bar end
        self.frame_1_statusbar = self.CreateStatusBar(1, 0)
        
        # Tool Bar
        self.frame_1_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_DOCKABLE|wx.TB_TEXT|wx.TB_NOICONS)
        self.SetToolBar(self.frame_1_toolbar)
        self.frame_1_toolbar.AddLabelTool(3, "PlotData", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.frame_1_toolbar.AddLabelTool(1, "RePlot", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.frame_1_toolbar.AddLabelTool(2, "ReDraw", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddLabelTool(4, "TFT", wx.NullBitmap, wx.NullBitmap, wx.ITEM_CHECK, "", "")
        # Tool Bar end
        self.viewer = wx.ScrolledWindow(self, -1, style=wx.TAB_TRAVERSAL)
        self.combo_box_1 = wx.ComboBox(self, -1, choices=[".1sec", ".5sec", "1sec", "5sec", "10sec", "20sec", "30sec", "60sec"], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN|wx.CB_READONLY)
        self.bitmap_button_2 = wx.BitmapButton(self, -1, wx.Bitmap("left.png", wx.BITMAP_TYPE_ANY))
        self.bitmap_button_1 = wx.BitmapButton(self, -1, wx.Bitmap("right.png", wx.BITMAP_TYPE_ANY))
        self.bitmap_button_3 = wx.BitmapButton(self, -1, wx.Bitmap("up.png", wx.BITMAP_TYPE_ANY))
        self.bitmap_button_4 = wx.BitmapButton(self, -1, wx.Bitmap("down.png", wx.BITMAP_TYPE_ANY))
        self.slider_3 = wx.Slider(self, -1, 0, 0, 1, style=wx.SL_HORIZONTAL|wx.SL_AUTOTICKS|wx.SL_LABELS|wx.SL_SELRANGE)
        self.slider_1 = wx.Slider(self, -1, 1, 0, 10, style=wx.SL_VERTICAL|wx.SL_AUTOTICKS|wx.SL_LABELS)
        self.button_1 = wx.ToggleButton(self, -1, "AutoScale")
        self.slider_2 = wx.Slider(self, -1, 1, 1, 100, style=wx.SL_VERTICAL|wx.SL_AUTOTICKS|wx.SL_LABELS)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.loaddatagui, id=10)
        self.Bind(wx.EVT_MENU, self.loadpythondata, id=11)
        self.Bind(wx.EVT_MENU, self.chproperties, id=22)
        self.Bind(wx.EVT_MENU, self.tftwindow, id=30)
        self.Bind(wx.EVT_TOOL, self.plotloadeddata, id=3)
        self.Bind(wx.EVT_TOOL, self.go, id=1)
        self.Bind(wx.EVT_TOOL, self.redraw, id=2)
        self.Bind(wx.EVT_TOOL, self.tftframe, id=4)
        self.Bind(wx.EVT_COMBOBOX, self.settimewin, self.combo_box_1)
        self.Bind(wx.EVT_BUTTON, self.panleft, self.bitmap_button_2)
        self.Bind(wx.EVT_BUTTON, self.panright, self.bitmap_button_1)
        self.Bind(wx.EVT_BUTTON, self.panup, self.bitmap_button_3)
        self.Bind(wx.EVT_BUTTON, self.pandown, self.bitmap_button_4)
        self.Bind(wx.EVT_COMMAND_SCROLL_THUMBTRACK, self.settimepnt, self.slider_3)
        self.Bind(wx.EVT_COMMAND_SCROLL_PAGEDOWN, self.settimepnt, self.slider_3)
        self.Bind(wx.EVT_COMMAND_SCROLL_PAGEUP, self.settimepnt, self.slider_3)
        self.Bind(wx.EVT_COMMAND_SCROLL_LINEDOWN, self.settimepnt, self.slider_3)
        self.Bind(wx.EVT_COMMAND_SCROLL_LINEUP, self.settimepnt, self.slider_3)
        self.Bind(wx.EVT_COMMAND_SCROLL_THUMBRELEASE, self.settimepnt, self.slider_3)
        self.Bind(wx.EVT_COMMAND_SCROLL_PAGEDOWN, self.numchans, self.slider_1)
        self.Bind(wx.EVT_COMMAND_SCROLL_ENDSCROLL, self.numchans, self.slider_1)
        self.Bind(wx.EVT_COMMAND_SCROLL_PAGEUP, self.numchans, self.slider_1)
        self.Bind(wx.EVT_COMMAND_SCROLL_THUMBRELEASE, self.numchans, self.slider_1)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.autoscalehandler, self.button_1)
        self.Bind(wx.EVT_COMMAND_SCROLL_THUMBTRACK, self.amplitudescale, self.slider_2)
        self.Bind(wx.EVT_COMMAND_SCROLL_PAGEDOWN, self.amplitudescale, self.slider_2)
        self.Bind(wx.EVT_COMMAND_SCROLL_PAGEUP, self.amplitudescale, self.slider_2)
        self.Bind(wx.EVT_COMMAND_SCROLL_LINEDOWN, self.amplitudescale, self.slider_2)
        self.Bind(wx.EVT_COMMAND_SCROLL_BOTTOM, self.amplitudescale, self.slider_2)
        self.Bind(wx.EVT_COMMAND_SCROLL_LINEUP, self.amplitudescale, self.slider_2)
        self.Bind(wx.EVT_COMMAND_SCROLL_THUMBRELEASE, self.amplitudescale, self.slider_2)
        # end wxGlade

        event = 0 
        self.dpi = 50
        
        left, width = 0.05, 0.8
        rect1 = [left, 0.2, width, 0.79]
        rect2 = [left, 0.1, width, 0.2]

        
        self.fig = Figure( None, dpi=self.dpi )
        #self.fig = Figure((8.0, 20.0), dpi=self.dpi)
        self.canvas = FigCanvas(self.viewer, -1, self.fig)
        self.redraw(event)
        #~ self.axes = self.fig.add_subplot(111,axisbg='#ababab')
        #~ self.axes2 = self.fig.add_subplot(111,axisbg='#ababab', sharex=self.axes)
        
        self.axes = self.fig.add_axes(rect1,axisbg='#ababab')
        #####self.axes.yaxis.set_visible(False)
        self.axes.set_frame_on(False)
        self.axes2 = self.fig.add_axes(rect2,axisbg='#ababab')#, sharex=self.axes)
        
        self.axes2.axis('on')
        
        #ax2 = fig.add_axes(rect2, axisbg=axescolor, sharex=ax1)
        #self.axes.axis('off')
        
        event = 0 
        #self.loaddata(event)
#        fn = '/home/danc/python/data/E0053/E0053_EEGSSPLR.pym'
#        self.trials = 10
#        #fn = '/home/danc/python/data/E0052/sim.pym'
#        self.origdata, self.timeaxes, self.chlabels, self.srate = retrievepythondata(fn)
        siz = self.GetSize()
        self.canvas.SetClientSize((siz[0]-1,siz[1]-100))
        self.zoomin(event)
        self.pan(event)
    
        #~ 
        #~ from pylab import *
        #~ try:
        #~ import Image
        #~ except ImportError, exc:
            #~ raise SystemExit("PIL must be installed to run this example")
        #~ 
        #lena = Image.open('AlbinoPython.jpg')
        #~ dpi = rcParams['figure.dpi']
        #~ figsize = lena.size[0]/dpi, lena.size[1]/dpi
        #~ 
        #~ figure(figsize=figsize)
        #~ ax = axes([0,0,1,1], frameon=False)
        #~ ax.set_axis_off()
        #self.axes.imshow(lena, origin='lower')
#~ 
        #show()

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("PyPlotter")
        self.SetSize((600, 600))
        self.frame_1_statusbar.SetStatusWidths([-1])
        # statusbar fields
        frame_1_statusbar_fields = ["PyPlotter"]
        for i in range(len(frame_1_statusbar_fields)):
            self.frame_1_statusbar.SetStatusText(frame_1_statusbar_fields[i], i)
        self.frame_1_toolbar.SetToolPacking(5)
        self.frame_1_toolbar.SetToolSeparation(5)
        self.frame_1_toolbar.Realize()
        self.viewer.SetBackgroundColour(wx.Colour(143, 143, 188))
        self.viewer.SetScrollRate(10, 10)
        self.combo_box_1.SetMinSize((87, 27))
        self.combo_box_1.SetSelection(0)
        self.bitmap_button_2.SetMinSize((55, 55))
        self.bitmap_button_2.Enable(False)
        self.bitmap_button_1.SetMinSize((55, 55))
        self.bitmap_button_1.Enable(False)
        self.bitmap_button_3.SetMinSize((55, 55))
        self.bitmap_button_3.Enable(False)
        self.bitmap_button_4.SetMinSize((55, 55))
        self.bitmap_button_4.Enable(False)
        self.slider_3.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.slider_3.SetToolTipString("Time Slider (sec)")
        self.slider_3.SetFocus()
        self.slider_1.SetToolTipString("Number of channels")
        self.slider_1.Enable(False)
        self.button_1.SetBackgroundColour(wx.Colour(143, 143, 188))
        self.button_1.SetValue(1)
        self.slider_2.SetToolTipString("Amplitude")
        self.slider_2.Enable(False)
        # end wxGlade
        

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.viewer, 3, wx.ALL|wx.EXPAND|wx.ALIGN_BOTTOM, 0)
        sizer_2.Add(self.combo_box_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.bitmap_button_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.bitmap_button_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.bitmap_button_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.bitmap_button_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.slider_3, 6, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.slider_1, 1, wx.ALL|wx.EXPAND, 0)
        sizer_2.Add(self.button_1, 0, 0, 0)
        sizer_2.Add(self.slider_2, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_1.Add(sizer_2, 0, wx.EXPAND|wx.ALIGN_BOTTOM, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.Centre()
        # end wxGlade
        #~ self.dpi = 100
        #~ self.fig = Figure((8.0, 20.0), dpi=self.dpi)
        #~ self.canvas = FigCanvas(self.viewer, -1, self.fig)
        #~ sizer_1.Add(self.frame_1_toolbar, 5, wx.LEFT | wx.EXPAND)
        #~ self.redraw(event)
        #~ self.axes = self.fig.add_subplot(111,axisbg='#ababab')

    def passdata(data):#, samplerate, channellabels):
        import sys
        print sys.argv
        import getopt
        opts, extraparams = getopt.getopt(sys.argv[1:]) 
        #~ data = np.random.randn(10000,10)
        #~ self.origdata = data    
        #~ self.sr = np.float32(100.0)
        #~ sp = 1/frame.sr
        #~ self.timeaxes = np.arange(0,sp*1000, sp)
        #~ self.chlabels = np.arange(0,244)

    def go(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `go' "
        self.draw_figure(event)
        #self.redraw(event)

    def clear(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `clear' not implemented"
        print self.GetSize()
        print self.fig.get_size_inches()
        x = self.canvas.GetClientSize() 
        print x
        #self.canvas.SetClientSize((x[0]/2,x[1]/2))
        x = self.GetSize()
        self.canvas.SetClientSize((x[0]/.8,x[1]/.9))
        #self.canvas.Destroy()
        #self.fig.clear()

    def redraw(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `redraw' not implemented"
        siz = self.GetSize()
        self.canvas.SetClientSize((siz[0]-1,siz[1]-100))
        self.canvas.Refresh(eraseBackground=True)
        
    def amplitudescale(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `amwxplitudescale' not implemented"
        print self.slider_2.GetValue()
        dmin=self.origdata.min()
        dmax=self.origdata.max()
        print dmin,dmax
        self.step=abs(dmin+dmax/10)/self.slider_2.GetValue()
        print 'step2',self.step
        #self.go(event)
        #~ self.numchans(event)
        #return step/self.slider_2.GetValue()
        #self.settimewin(event)
        
        
    def numchans(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `numchans' not implemented"
        self.slider_1.SetRange(0,np.size(self.origdata,1))
        self.data = self.origdata[:,0:self.slider_1.GetValue()]
        self.label2plot = self.chlabels[0:self.slider_1.GetValue()]
        #self.settimewin(event)
        try:
            self.go(event)
        except AttributeError:
            print 'error'

    def settimewin(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `settimewin' not implemented"
        #~ self.startsec = self.slider_3.GetValue() * int(self.combo_box_1.GetValue().strip('sec'))
        #~ self.endsec = self.startsec + int(self.combo_box_1.GetValue().strip('sec'))
        self.startsec = self.slider_3.GetValue() 
        self.endsec = self.startsec + np.float32(self.combo_box_1.GetValue().strip('sec'))
        print 'pp', self.startsec, self.endsec
        self.indstart = np.argmin(abs(self.startsec - self.timeaxes))
        self.indend = np.argmin(abs(self.endsec+ - self.timeaxes))
        print 'ind', self.indstart, self.indend
        self.canvas.Update()
        self.go(event)
        #self.go(event)
        
        
    def settimepnt(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `settimepnt' not implemented"
        self.settimewin(event)
        #~ self.timepnt = self.slider_3.GetValue()
        #~ self.indstart = argmin(abs(self.timepnt - self.timeaxes))
        #~ self.indend = argmin(abs(self.timepnt+ - self.timeaxes))
        #~ 
        #~ print self.indstart, 
        
    def setupwidgets(self):
        self.slider_1.Enable(enable=True)
        self.slider_2.Enable(enable=True)
        self.bitmap_button_1.Enable(True)
        self.bitmap_button_2.Enable(True)
        self.bitmap_button_3.Enable(True)
        self.bitmap_button_4.Enable(True)
        self.combo_box_1.Enable(True)
        x = []
        for n in range(0, np.size(self.chlabels)):
            x.append(str(n))
        #self.combo_box_1.SetItems(unicode(self.chlabels.tolist()))
        #self.combo_box_1.SetItems(x)
        print self.timeaxes[0],self.timeaxes[-1]
        self.slider_3.SetRange(self.timeaxes[0],self.timeaxes[-1])
        

    def panleft(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `panleft' not implemented"
        event.Skip()

    def panright(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `panright' not implemented"
        event.Skip()

    def panup(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `panup' not implemented"
        
        try:
            self.e = self.s
            self.s = self.e - self.slider_1.GetValue()
        except AttributeError:
            print 'setting'
            self.e = self.slider_1.GetValue()
            self.s = self.e + self.e
        if self.s < 0:
            print 'at start of channel set'
            self.s = 0
            self.e = self.s + self.slider_1.GetValue()

        self.data = self.origdata[:,self.s:self.e]
        print 'du' , self.s,self.e
        self.label2plot = self.chlabels[self.s:self.e]
        self.go(event)

    def pandown(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `pandown' not implemented"
        try:
            self.s = self.e
            self.e = self.s + self.slider_1.GetValue()
        except AttributeError:
            print 'setting'
            self.s = self.slider_1.GetValue()
            self.e = self.s + self.s
        if self.e > np.size(self.origdata,1):
            print 'at end of channel set'
            self.e = np.size(self.origdata,1)
            self.s = self.e - self.slider_1.GetValue()
        
        self.data = self.origdata[:,self.s:self.e]
        print 'dd' , self.s,self.e
        self.label2plot = self.chlabels[self.s:self.e]
        self.go(event)

    

    def loaddatagui(self, event): # wxGlade: MyFrame.<event_handler>
    
        self.datapath = '/home/danc/python/data/0611/0611piez/e,rfhp1.0Hz,COH'
        import os
        print "Event handler `loaddatagui' not implemented"
        dlg = wx.FileDialog(self, "Select an Data file", os.getcwd(), "", "*", wx.OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            self.datapath = dlg.GetPath()
            dlg.Destroy()

        #~ dlg = wx.MessageDialog(self, 'First you need to load MRI data file', 'MRI file error', wx.OK|wx.ICON_INFORMATION)
        #~ dlg.ShowModal()
        #~ dlg.Destroy()
        
        
        #from gui import pysel
        #pysel.start()
        #p#rint 'done', pysel.fnlist
        self.origdata, self.timeaxes, self.chlabels, self.srate = retrievepdf(self.datapath)#self.datapath)
        self.data = self.origdata
        self.chproperties(event)
        self.plotloadeddata(event)
        #chpropertywin.loadchannels(event)
        

    def plotloadeddata(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `plotdata' "
        #print pysel.fnlist
        #self.origdata, self.timeaxes, self.chlabels = getdata()
        self.data = self.origdata
        self.numchans(event)
        self.amplitudescale(event)
        self.settimewin(event)
        #print 'labels', label2plot
        self.setupwidgets()
        self.go(event)
        #self.numchans(event)
        print 'step',self.step
        

    def loadpythondata(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `loadpythondata' not implemented"
        import os
        print "Event handler `loaddatagui' not implemented"
        dlg = wx.FileDialog(self, "Select a python file(s)", os.getcwd(), "",wildcard = "Data File (*.pym)|*.pym|Dipole Report(*.drf)|*.drf")
        if dlg.ShowModal() == wx.ID_OK:
            self.datapath = dlg.GetPath()
            dlg.Destroy()
            
        self.origdata, self.timeaxes, self.chlabels = retrievepythondata(self.datapath)#self.datapath)

    def autoscalehandler(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `autoscalehandler' not implemented"
        if self.button_1.GetValue() == 0:
            print 'manual scaling'
            scalewin.Show()
            
        else:
            print 'auto scaling'
            scalewin.Hide()
            

    def tftinit(self, event): # wxGlade: MyFrame.<event_handler>
        #if self.frame_1_toolbar.GetToolState(4) == True: #depressed
        from meg import timef

        t = timef.initialize()
        self.redraw(event)
        print self.tftch, self.trials, self.srate
        #print 's', np.shape(self.origdata[self.indstart:self.indend,19]),np.shape(self.data[self.indstart:self.indend,19])
        print 'inds', self.indstart, 'inde', self.indend
        #dif = np.size(self.data[self.indstart:self.indend:19],0); print 'dif', dif, self.indend, self.indstart
        dif = self.indend-self.indstart; print 'dif', dif, self.indend, self.indstart
        print 'shape of data', np.shape(self.origdata[self.indstart:self.indend,self.tftch])
        t.calc(data=self.origdata[self.indstart:self.indend,self.tftch], trials=self.trials, srate=self.srate,frames=dif/self.trials, freqrange=[3.0,100], cycles=[2, .5])
        #self.axes.plot(self.data[self.indstart:self.indend:,i]+inc, color=[0,0,0])
        #self.axes2.imshow(abs(t.tmpallallepochs))#, aspect=6,extent=(int(t.timevals[0]), int(t.timevals[-1]), int(t.freqrange[1]), int(t.freqrange[0])));colorbar();show()
        #self.axes2.imshow(abs(t.tmpallallepochs))#,aspect = 1, extent=(int(t.timevals[0]), int(t.timevals[-1]), int(t.freqrange[1]), int(t.freqrange[0])))
        self.axes2.imshow(abs(t.tmpallallepochs) ,extent=(int(t.timevals[0]), int(t.timevals[-1]), int(t.freqrange[1]), int(t.freqrange[0])))
        print 'tftshape', np.shape(t.tmpallallepochs)
        #self.redraw(event)
        #self.axes2.update()
        self.canvas.draw()   
            
        print "Event handler `tftinit' not implemented"
        event.Skip()

    def tftframe(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `tftframe' not implemented"
        tftframe.Show()
        

    def tftwindow(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `tftwindow' not implemented"
        tftframe.Show()

    def chproperties(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `chproperties' not implemented"
        chpropertywin.Show()
        chpropertywin.list_box_channels.SetItems(frame.chlabels)
        for i in frame.chlabels:
            index = chpropertywin.list_ctrl_1.InsertStringItem(sys.maxint, str(i))
            chpropertywin.list_ctrl_1.SetStringItem(index, 1, i)
                #self.list_ctrl_1.SetItem(i)
            #self.list_ctrl_1.SetItem(frame.chlabels)
            chpropertywin.chcolorlist = np.tile((0,0,0),(len(frame.chlabels),1)) #set all channels to black



# end of class MyFrame
#-----------------------------------------------------
    def pan(self, event):
        import time
        
        def on_press(event):
            self.clicktime = time.time()
#            self.releasetime = False
            self.holdcheck = 'yes'
            #on_move(event)
            
#            try:
#                if self.clicktime 
        def on_release(event):
            self.releasetime = time.time()  
            self.holdcheck = 'no'
            print 'you released', event.button, event.xdata, event.ydata
            self.canvas.draw()
        def on_move(event):
            try:
                if self.holdcheck == 'yes':
                    print 'your pointer is at', event.xdata, event.ydata
                    x1,x2=self.axes.get_xlim() 
                    y1,y2=self.axes.get_ylim()
                    print x1,x2,y1,y2,'::::', x2-x1, y2-y1
                    self.axes.set_xlim(event.xdata + (x2-x1)/2, event.xdata - (x2-x1)/2)
                    self.axes.set_ylim(event.ydata + (y2-y1)/2, event.ydata - (y2-y1)/2)
                    
            except AttributeError:
                pass
                #print 'no click yet'
            
        
        cid = self.fig.canvas.mpl_connect('button_press_event', on_press)
        rid = self.fig.canvas.mpl_connect('button_release_event', on_release)
        mousemove = self.fig.canvas.mpl_connect('motion_notify_event', on_move)
        
    def zoomin(self, event):
        import time
        def on_press(event):
            
            try:
                self.lasttime = self.curtime
            except AttributeError:
                self.lasttime = 0
            
            self.curtime = time.time()
            if np.round(self.curtime,2) != np.round(self.lasttime,2):
                tdiff = self.curtime - self.lasttime
                print 'time diff',tdiff
                print 'you pressed', event.button, event.xdata, event.ydata
                if tdiff < .25:
                    tdiff = 0
                    x1,x2=self.axes.get_xlim() 
                    y1,y2=self.axes.get_ylim()
                    print x1,x2,y1,y2
                    #~ self.axes.set_xlim(x1/2,x2/2)                    
                    #~ self.axes.set_ylim(y1/2,y2/2)
                    #self.axes.set_xlim(event.xdata-(x2-x1)/2, event.xdata+(x2-x1)/2)
                    if event.button == 1: #zoom in
                        self.axes.set_xlim(event.xdata - (x2-x1)/4, event.xdata + (x2-x1)/4)
                        self.axes.set_ylim(event.ydata - (y2-y1)/4, event.ydata + (y2-y1)/4)
                    if event.button == 3: #zoom out
                        self.axes.set_xlim(event.xdata - (x2-x1)*1, event.xdata + (x2-x1)*1)
                        self.axes.set_ylim(event.ydata - (y2-y1)*1, event.ydata + (y2-y1)*1)
                        
                    #self.axes.set_xlim(np.mean(event.xdata,x1), np.mean(event.xdata,x2))                     
                    #self.axes.set_ylim(np.mean(event.ydata,y1), np.mean(event.ydata,y2))  
                                            
                    self.canvas.draw()    
                    

        
        cid = self.fig.canvas.mpl_connect('button_press_event', on_press)
        

        

    def axeslabels(self, data):#, chlabels, timelabels):
        chlabels = np.arange(np.size(data,1))
        timelabels = ['100','200','300']
        #~ if np.size(chlabels) != np.size(data,1):
            #~ print np.size(chlabels), np.size(data,1)
            #~ print 'channel label length differs from data'
            #~ #return
        
        return chlabels,timelabels


    def draw_figure(self, event):
        
        #~ try:
            #~ count = count + 1
        #~ except UnboundLocalError:
            #~ count = 0
        #~ if not hasattr(self, 'subplot'):
            #~ self.axes = self.fig.add_subplot(111,axisbg='#ababab')
        #~ self._resizeflag = False
        #~ #self.axes.bar(left=10,height=100,width=100,align='center',alpha=0.44,picker=5)
        #~ self.dpi = 50
        #~ self.fig = Figure( None, dpi=self.dpi )
        #~ self.canvas = FigCanvas(self.viewer, -1, self.fig)
        self.redraw(event)
        #~ self.axes = self.fig.add_subplot(111,axisbg='#ababab')
        #self.canvas.Update()
        #self.canvas.UpdateRegion()
        #self.canvas.Refresh()
        self.axes.clear()
        #~ self.canvas.Close()
        #self.canvas.gui_repaint()
        self.canvas.Show()
        #~ print 'count',count
       
        #self.axes.axis('off')
        self.axes.grid('on')
        inc=0
        print 'drawshapestate',np.shape(self.origdata), np.shape(self.data), np.shape(self.timeaxes),self.indstart, self.indend
        
        for i in range(0,np.size(self.data,1))[::-1]:
            #self.axes.plot(self.origdata[self.indstart:self.indend:,i]+inc)
            colur = chpropertywin.chcolorlist[i]/256.0
            
            #~ if i < 2:
                #~ colur = (0,0,1)
            #~ else:
                #~ colur = (0,0,0)
            self.axes.plot(self.data[self.indstart:self.indend:,i]+inc, color=colur)
            if self.frame_1_toolbar.GetToolState(4) == True: #depressed 
                #print 's', np.shape(self.origdata[self.indstart:self.indend,19]),np.shape(self.data[self.indstart:self.indend,19])
                #t.calc(data=self.origdata[self.indstart:self.indend,19], trials=10, srate=290.64,frames=dif/10, freqrange=[5.0,70], cycles=[2, .5])
                pass
                #self.tftinit(event)
                #self.axes2.imshow(abs(t.tmpallallepochs),aspect = 7, extent=(int(t.timevals[0]), int(t.timevals[-1]), int(t.freqrange[1]), int(t.freqrange[0])))
            #self.axes.plot(self.data[:,i]+inc)
            self.axes.text(0,inc, self.label2plot[i],color=[1,0,0])
            inc=self.step/2+inc
        #self.axes.update()
        #self.axes.set_xlim((self.indstart,self.indend))
        #self.canvas.Update()
        
        
    def _onIdle( self, evt ):
        if self._resizeflag:
            self._resizeflag = False
            self._SetSize()
            print 'idle'
        
    def _onSize( self, event ):
        self._resizeflag = True
        
    def _SetSize( self ):
        pixels = tuple( self.GetClientSize() )
        self.SetSize( pixels )
        self.canvas.SetSize( pixels )
        self.fig.set_size_inches( float( pixels[0] )/self.fig.get_dpi(),
                                     float( pixels[1] )/self.fig.get_dpi() )
class passdata2me(MyFrame):
    def __init__(self, data, samplerate, channellabels):
        import sys
        print sys.argv
        
        pass
    #def passdata(self,data):#, samplerate, channellabels):
        app = wx.PySimpleApp(0)
        wx.InitAllImageHandlers()
        frame = MyFrame(None, -1, "")
        #scalewin = FrameScaling(None, 1, "")
        #chpropertywin = FrameChOptions(None, 1, "")
        frame.origdata = data
        frame.data = data
        #frame.sr = np.float32(100.0)
        sp = 1/np.float32(samplerate)
        frame.timeaxes = np.arange(0,np.float32(samplerate)*1000, sp)
        frame.chlabels = channellabels
        app.SetTopWindow(frame)
        frame.Show()
        app.MainLoop()
        


if __name__ == "__main__":
    import sys
    print sys.argv
    #~ import getopt
    #~ opts, extraparams = getopt.getopt(sys.argv[1:]) 
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame = MyFrame(None, -1, "")
    scalewin = FrameScaling(None, 1, "")
    chpropertywin = FrameChOptions(None, 1, "")
    #frame.origdata, frame.timeaxes, frame.chlabels = getdata()
    tftframe = FrameTFT(None, -1, "")
    #~ panel = DemoPlotPanel( frame, points, clrs )
    #frame_1.draw_figure()
    app.SetTopWindow(frame)
    frame.Show()
    app.MainLoop()

